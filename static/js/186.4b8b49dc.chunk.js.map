{"version":3,"file":"static/js/186.4b8b49dc.chunk.js","mappings":"uRAEMA,EAAS,mCAETC,EAAU,gCAEHC,EAAW,eAAAC,GAAAC,EAAAA,EAAAA,GAAAC,IAAAA,MAAG,SAAAC,IAAA,IAAAC,EAAA,OAAAF,IAAAA,MAAA,SAAAG,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACAC,EAAAA,EAAAA,IAAU,GAADC,OAAIX,EAAO,8BAAAW,OAA6BZ,IAAU,KAAD,EAAnE,OAARO,EAAQC,EAAAK,KAAAL,EAAAM,OAAA,SACPP,EAASQ,MAAI,wBAAAP,EAAAQ,OAAA,GAAAV,EAAA,KACvB,kBAHuB,OAAAH,EAAAc,MAAA,KAAAC,UAAA,KAWXC,EAAU,eAAAC,GAAAhB,EAAAA,EAAAA,GAAAC,IAAAA,MAAG,SAAAgB,EAAOC,GAAO,IAAAf,EAAA,OAAAF,IAAAA,MAAA,SAAAkB,GAAA,cAAAA,EAAAd,KAAAc,EAAAb,MAAA,cAAAa,EAAAb,KAAA,EAChBC,EAAAA,EAAAA,IAAU,GAADC,OAAIX,EAAO,WAAAW,OAAUU,EAAO,aAAAV,OAAYZ,IAAU,KAAD,EAAnE,OAARO,EAAQgB,EAAAV,KAAAU,EAAAT,OAAA,SACRP,EAASQ,KAAKS,SAAO,wBAAAD,EAAAP,OAAA,GAAAK,EAAA,KAC3B,gBAHsBI,GAAA,OAAAL,EAAAH,MAAA,KAAAC,UAAA,KAKVQ,EAAO,eAAAC,GAAAvB,EAAAA,EAAAA,GAAAC,IAAAA,MAAG,SAAAuB,EAAON,GAAO,IAAAf,EAAA,OAAAF,IAAAA,MAAA,SAAAwB,GAAA,cAAAA,EAAApB,KAAAoB,EAAAnB,MAAA,cAAAmB,EAAAnB,KAAA,EACXC,EAAAA,EAAAA,IAAU,GAADC,OAAIX,EAAO,WAAAW,OAAUU,EAAO,qBAAAV,OAAoBZ,IAAU,KAAD,EAA3E,OAARO,EAAQsB,EAAAhB,KAAAgB,EAAAf,OAAA,SACRP,EAASQ,KAAKS,SAAO,wBAAAK,EAAAb,OAAA,GAAAY,EAAA,KAC7B,gBAHmBE,GAAA,OAAAH,EAAAV,MAAA,KAAAC,UAAA,KAKPa,EAAU,eAAAC,GAAA5B,EAAAA,EAAAA,GAAAC,IAAAA,MAAG,SAAA4B,EAAOX,GAAO,IAAAf,EAAA,OAAAF,IAAAA,MAAA,SAAA6B,GAAA,cAAAA,EAAAzB,KAAAyB,EAAAxB,MAAA,OAC+C,OAA9EH,EAAWI,EAAAA,EAAAA,IAAU,GAADC,OAAIX,EAAO,WAAAW,OAAUU,EAAO,qBAAAV,OAAoBZ,IAASkC,EAAApB,OAAA,SAC7EP,EAASQ,KAAKS,SAAO,wBAAAU,EAAAlB,OAAA,GAAAiB,EAAA,KAC7B,gBAHsBE,GAAA,OAAAH,EAAAf,MAAA,KAAAC,UAAA,I,8ECevB,UAtCgB,WACd,IAAAkB,GAAwCC,EAAAA,EAAAA,UAAS,MAAKC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA/CI,EAAYF,EAAA,GAAEG,EAAeH,EAAA,GAC5BhB,GAAYoB,EAAAA,EAAAA,MAAZpB,QAcV,OAXIqB,EAAAA,EAAAA,YAAU,WACFrB,IAIJS,EAAAA,EAAAA,IAAWT,GACZsB,KAAKH,EAGZ,GAAG,CAACnB,IAECkB,GAKCK,EAAAA,EAAAA,KAAA,OAAAC,SACCN,EAAaO,OAAS,GACrBF,EAAAA,EAAAA,KAAA,MAAAC,SACGN,EAAaQ,KAAI,SAAAC,GAAM,OACtBC,EAAAA,EAAAA,MAAA,MAAAJ,SAAA,EACEI,EAAAA,EAAAA,MAAA,MAAAJ,SAAA,CAAI,WAASG,EAAOE,WACpBN,EAAAA,EAAAA,KAAA,KAAAC,SAAIG,EAAOG,YAFJH,EAAOI,GAGX,MAIT,wCAfC,IAmBT,C","sources":["components/Api.jsx","components/Reviews/Reviews.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst apiKey = '25e2aa0c0d0f2efeb739a87ae42543b5';\n\nconst baseUrl = 'https://api.themoviedb.org/3/';\n\nexport const getTrending = async () => {\n    const response = await axios.get(`${baseUrl}trending/all/week?api_key=${apiKey}`);\n    return response.data;\n}\n\n//  życie identyfikatora filmu (movieID) w endpointach związanych z konkretnym filmem, takimi jak \n// get - movie - details, get - movie - credits i get - movie - reviews, jest związane z konwencją używaną przez API themoviedb.org.\nexport const getKeyword = async (keyword) => {\n const response = axios.get(`${baseUrl}/search/movie?api_key=${apiKey}&query=${keyword}`);\n  return response.data.results;\n};\nexport const getDetails = async (movieId) => {\n const response = await axios.get(`${baseUrl}/movie/${movieId}?api_key=${apiKey}`);\nreturn response.data.results;\n};\n\nexport const getCast = async (movieId) => {\n   const response = await axios.get(`${baseUrl}/movie/${movieId}/credits?api_key=${apiKey}`);\n  return response.data.results;  \n}\n\nexport const getReviews = async (movieId) => {\n   const response = axios.get(`${baseUrl}/movie/${movieId}/reviews?api_key=${apiKey}`);\n  return response.data.results;  \n}\n\n\n\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getReviews } from '../Api'\n\nconst Reviews = () => {\n  const [movieReviews, setMovieReviews] = useState(null);\n  const { movieId } = useParams();\n    \n    //  useEffect do pobierania recenzji\n    useEffect(() => {\n        if (movieId) {\n    //   Wywołanie funkcji getReviews \n    // i ustawienie recenzji filmu za pomocą funkcji setMovieReviews po pobraniu recenzji\n            \n        getReviews(movieId)\n      .then(setMovieReviews);\n        }\n//  określa, które zmienne powinny być śledzone przez useEffect, aby odpowiednio reagować na zmiany w tych zmiennych\n}, [movieId]);\n\nif (!movieReviews) {\n  return null;\n}\n\n  return (\n      <div>\n      {movieReviews.length > 0 ? (\n        <ul>\n          {movieReviews.map(review => (\n            <li key={review.id}>\n              <h3>Author: {review.author}</h3>\n              <p>{review.content}</p>\n            </li>\n          ))}\n        </ul>\n      ) : (\n        'There is no review of this film yet'\n      )}\n    </div>\n  );\n};\n\nexport default Reviews;\n\n/* Warunek sprawdza, czy długość tablicy movieReviews jest większa niż 0.\nJeśli movieReviews.length jest większe niż 0, renderuje listę nieuporządkowaną ul. */\n      /* Jeśli nie ma recenzji movieReviews.length nie jest większe niż 0, renderuje tekst \"Brak recenzji tego filmu\". */"],"names":["apiKey","baseUrl","getTrending","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","response","_context","prev","next","axios","concat","sent","abrupt","data","stop","apply","arguments","getDetails","_ref3","_callee3","movieId","_context3","results","_x2","getCast","_ref4","_callee4","_context4","_x3","getReviews","_ref5","_callee5","_context5","_x4","_useState","useState","_useState2","_slicedToArray","movieReviews","setMovieReviews","useParams","useEffect","then","_jsx","children","length","map","review","_jsxs","author","content","id"],"sourceRoot":""}